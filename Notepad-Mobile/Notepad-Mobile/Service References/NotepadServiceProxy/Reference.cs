//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Notepad_Mobile.NotepadServiceProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDC", Namespace="http://schemas.datacontract.org/2004/07/NotepadServiceRole")]
    public partial class UserDC : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string NameField;
        
        private string PassField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pass {
            get {
                return this.PassField;
            }
            set {
                if ((object.ReferenceEquals(this.PassField, value) != true)) {
                    this.PassField = value;
                    this.RaisePropertyChanged("Pass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteDC", Namespace="http://schemas.datacontract.org/2004/07/NotepadServiceRole")]
    public partial class NoteDC : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int NoteIdField;
        
        private string NoteTextField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoteId {
            get {
                return this.NoteIdField;
            }
            set {
                if ((this.NoteIdField.Equals(value) != true)) {
                    this.NoteIdField = value;
                    this.RaisePropertyChanged("NoteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NoteText {
            get {
                return this.NoteTextField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteTextField, value) != true)) {
                    this.NoteTextField = value;
                    this.RaisePropertyChanged("NoteText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupDC", Namespace="http://schemas.datacontract.org/2004/07/NotepadServiceRole")]
    public partial class GroupDC : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int GroupIdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotepadServiceProxy.INotepad")]
    public interface INotepad {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/CheckUser", ReplyAction="http://tempuri.org/INotepad/CheckUserResponse")]
        System.IAsyncResult BeginCheckUser(string userName, string userPass, System.AsyncCallback callback, object asyncState);
        
        Notepad_Mobile.NotepadServiceProxy.UserDC EndCheckUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/AddUser", ReplyAction="http://tempuri.org/INotepad/AddUserResponse")]
        System.IAsyncResult BeginAddUser(string userName, string userPass, string userDescription, System.AsyncCallback callback, object asyncState);
        
        Notepad_Mobile.NotepadServiceProxy.UserDC EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/UpdateUser", ReplyAction="http://tempuri.org/INotepad/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(int userID, string userDescription, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/DeleteUser", ReplyAction="http://tempuri.org/INotepad/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(int userID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/AddNote", ReplyAction="http://tempuri.org/INotepad/AddNoteResponse")]
        System.IAsyncResult BeginAddNote(int userID, string noteDescription, string noteText, System.AsyncCallback callback, object asyncState);
        
        Notepad_Mobile.NotepadServiceProxy.NoteDC EndAddNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/UpdateNote", ReplyAction="http://tempuri.org/INotepad/UpdateNoteResponse")]
        System.IAsyncResult BeginUpdateNote(int noteID, string noteText, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/DeleteNote", ReplyAction="http://tempuri.org/INotepad/DeleteNoteResponse")]
        System.IAsyncResult BeginDeleteNote(int noteID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/AddGroup", ReplyAction="http://tempuri.org/INotepad/AddGroupResponse")]
        System.IAsyncResult BeginAddGroup(string groupName, string groupDescription, System.AsyncCallback callback, object asyncState);
        
        void EndAddGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/UpdateGroup", ReplyAction="http://tempuri.org/INotepad/UpdateGroupResponse")]
        System.IAsyncResult BeginUpdateGroup(int groupID, string groupDescription, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/DeleteGroup", ReplyAction="http://tempuri.org/INotepad/DeleteGroupResponse")]
        System.IAsyncResult BeginDeleteGroup(int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/AddUserToGroup", ReplyAction="http://tempuri.org/INotepad/AddUserToGroupResponse")]
        System.IAsyncResult BeginAddUserToGroup(int userID, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndAddUserToGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/AddNoteToGroup", ReplyAction="http://tempuri.org/INotepad/AddNoteToGroupResponse")]
        System.IAsyncResult BeginAddNoteToGroup(int noteID, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndAddNoteToGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/RemoveUserFromGroup", ReplyAction="http://tempuri.org/INotepad/RemoveUserFromGroupResponse")]
        System.IAsyncResult BeginRemoveUserFromGroup(int userID, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveUserFromGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/RemoveNoteFromGroup", ReplyAction="http://tempuri.org/INotepad/RemoveNoteFromGroupResponse")]
        System.IAsyncResult BeginRemoveNoteFromGroup(int noteID, int groupID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveNoteFromGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/GetUser", ReplyAction="http://tempuri.org/INotepad/GetUserResponse")]
        System.IAsyncResult BeginGetUser(int userID, System.AsyncCallback callback, object asyncState);
        
        Notepad_Mobile.NotepadServiceProxy.UserDC EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/GetNote", ReplyAction="http://tempuri.org/INotepad/GetNoteResponse")]
        System.IAsyncResult BeginGetNote(int noteID, System.AsyncCallback callback, object asyncState);
        
        Notepad_Mobile.NotepadServiceProxy.NoteDC EndGetNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/GetGroup", ReplyAction="http://tempuri.org/INotepad/GetGroupResponse")]
        System.IAsyncResult BeginGetGroup(int groupID, System.AsyncCallback callback, object asyncState);
        
        Notepad_Mobile.NotepadServiceProxy.GroupDC EndGetGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/GetUserNotes", ReplyAction="http://tempuri.org/INotepad/GetUserNotesResponse")]
        System.IAsyncResult BeginGetUserNotes(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> EndGetUserNotes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/GetGroupNotes", ReplyAction="http://tempuri.org/INotepad/GetGroupNotesResponse")]
        System.IAsyncResult BeginGetGroupNotes(int groupID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> EndGetGroupNotes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotepad/GetGroupUsers", ReplyAction="http://tempuri.org/INotepad/GetGroupUsersResponse")]
        System.IAsyncResult BeginGetGroupUsers(int groupID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC> EndGetGroupUsers(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotepadChannel : Notepad_Mobile.NotepadServiceProxy.INotepad, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad_Mobile.NotepadServiceProxy.UserDC Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad_Mobile.NotepadServiceProxy.UserDC)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad_Mobile.NotepadServiceProxy.UserDC Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad_Mobile.NotepadServiceProxy.UserDC)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad_Mobile.NotepadServiceProxy.NoteDC Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad_Mobile.NotepadServiceProxy.NoteDC)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad_Mobile.NotepadServiceProxy.UserDC Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad_Mobile.NotepadServiceProxy.UserDC)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad_Mobile.NotepadServiceProxy.NoteDC Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad_Mobile.NotepadServiceProxy.NoteDC)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Notepad_Mobile.NotepadServiceProxy.GroupDC Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Notepad_Mobile.NotepadServiceProxy.GroupDC)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotepadClient : System.ServiceModel.ClientBase<Notepad_Mobile.NotepadServiceProxy.INotepad>, Notepad_Mobile.NotepadServiceProxy.INotepad {
        
        private BeginOperationDelegate onBeginCheckUserDelegate;
        
        private EndOperationDelegate onEndCheckUserDelegate;
        
        private System.Threading.SendOrPostCallback onCheckUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNoteDelegate;
        
        private EndOperationDelegate onEndAddNoteDelegate;
        
        private System.Threading.SendOrPostCallback onAddNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateNoteDelegate;
        
        private EndOperationDelegate onEndUpdateNoteDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteNoteDelegate;
        
        private EndOperationDelegate onEndDeleteNoteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddGroupDelegate;
        
        private EndOperationDelegate onEndAddGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateGroupDelegate;
        
        private EndOperationDelegate onEndUpdateGroupDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteGroupDelegate;
        
        private EndOperationDelegate onEndDeleteGroupDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserToGroupDelegate;
        
        private EndOperationDelegate onEndAddUserToGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserToGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNoteToGroupDelegate;
        
        private EndOperationDelegate onEndAddNoteToGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddNoteToGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUserFromGroupDelegate;
        
        private EndOperationDelegate onEndRemoveUserFromGroupDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUserFromGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveNoteFromGroupDelegate;
        
        private EndOperationDelegate onEndRemoveNoteFromGroupDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveNoteFromGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNoteDelegate;
        
        private EndOperationDelegate onEndGetNoteDelegate;
        
        private System.Threading.SendOrPostCallback onGetNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupDelegate;
        
        private EndOperationDelegate onEndGetGroupDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserNotesDelegate;
        
        private EndOperationDelegate onEndGetUserNotesDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserNotesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupNotesDelegate;
        
        private EndOperationDelegate onEndGetGroupNotesDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupNotesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupUsersDelegate;
        
        private EndOperationDelegate onEndGetGroupUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NotepadClient() {
        }
        
        public NotepadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotepadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotepadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotepadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CheckUserCompletedEventArgs> CheckUserCompleted;
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<AddNoteCompletedEventArgs> AddNoteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateNoteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteNoteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddUserToGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddNoteToGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveUserFromGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveNoteFromGroupCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<GetNoteCompletedEventArgs> GetNoteCompleted;
        
        public event System.EventHandler<GetGroupCompletedEventArgs> GetGroupCompleted;
        
        public event System.EventHandler<GetUserNotesCompletedEventArgs> GetUserNotesCompleted;
        
        public event System.EventHandler<GetGroupNotesCompletedEventArgs> GetGroupNotesCompleted;
        
        public event System.EventHandler<GetGroupUsersCompletedEventArgs> GetGroupUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginCheckUser(string userName, string userPass, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckUser(userName, userPass, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad_Mobile.NotepadServiceProxy.UserDC Notepad_Mobile.NotepadServiceProxy.INotepad.EndCheckUser(System.IAsyncResult result) {
            return base.Channel.EndCheckUser(result);
        }
        
        private System.IAsyncResult OnBeginCheckUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string userPass = ((string)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginCheckUser(userName, userPass, callback, asyncState);
        }
        
        private object[] OnEndCheckUser(System.IAsyncResult result) {
            Notepad_Mobile.NotepadServiceProxy.UserDC retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndCheckUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckUserCompleted(object state) {
            if ((this.CheckUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckUserCompleted(this, new CheckUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckUserAsync(string userName, string userPass) {
            this.CheckUserAsync(userName, userPass, null);
        }
        
        public void CheckUserAsync(string userName, string userPass, object userState) {
            if ((this.onBeginCheckUserDelegate == null)) {
                this.onBeginCheckUserDelegate = new BeginOperationDelegate(this.OnBeginCheckUser);
            }
            if ((this.onEndCheckUserDelegate == null)) {
                this.onEndCheckUserDelegate = new EndOperationDelegate(this.OnEndCheckUser);
            }
            if ((this.onCheckUserCompletedDelegate == null)) {
                this.onCheckUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckUserCompleted);
            }
            base.InvokeAsync(this.onBeginCheckUserDelegate, new object[] {
                        userName,
                        userPass}, this.onEndCheckUserDelegate, this.onCheckUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginAddUser(string userName, string userPass, string userDescription, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(userName, userPass, userDescription, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad_Mobile.NotepadServiceProxy.UserDC Notepad_Mobile.NotepadServiceProxy.INotepad.EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string userPass = ((string)(inValues[1]));
            string userDescription = ((string)(inValues[2]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginAddUser(userName, userPass, userDescription, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            Notepad_Mobile.NotepadServiceProxy.UserDC retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(string userName, string userPass, string userDescription) {
            this.AddUserAsync(userName, userPass, userDescription, null);
        }
        
        public void AddUserAsync(string userName, string userPass, string userDescription, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        userName,
                        userPass,
                        userDescription}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginUpdateUser(int userID, string userDescription, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(userID, userDescription, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndUpdateUser(System.IAsyncResult result) {
            base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string userDescription = ((string)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginUpdateUser(userID, userDescription, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndUpdateUser(result);
            return null;
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(int userID, string userDescription) {
            this.UpdateUserAsync(userID, userDescription, null);
        }
        
        public void UpdateUserAsync(int userID, string userDescription, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        userID,
                        userDescription}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginDeleteUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndDeleteUser(System.IAsyncResult result) {
            base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginDeleteUser(userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndDeleteUser(result);
            return null;
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(int userID) {
            this.DeleteUserAsync(userID, null);
        }
        
        public void DeleteUserAsync(int userID, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        userID}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginAddNote(int userID, string noteDescription, string noteText, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNote(userID, noteDescription, noteText, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad_Mobile.NotepadServiceProxy.NoteDC Notepad_Mobile.NotepadServiceProxy.INotepad.EndAddNote(System.IAsyncResult result) {
            return base.Channel.EndAddNote(result);
        }
        
        private System.IAsyncResult OnBeginAddNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string noteDescription = ((string)(inValues[1]));
            string noteText = ((string)(inValues[2]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginAddNote(userID, noteDescription, noteText, callback, asyncState);
        }
        
        private object[] OnEndAddNote(System.IAsyncResult result) {
            Notepad_Mobile.NotepadServiceProxy.NoteDC retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndAddNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddNoteCompleted(object state) {
            if ((this.AddNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNoteCompleted(this, new AddNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNoteAsync(int userID, string noteDescription, string noteText) {
            this.AddNoteAsync(userID, noteDescription, noteText, null);
        }
        
        public void AddNoteAsync(int userID, string noteDescription, string noteText, object userState) {
            if ((this.onBeginAddNoteDelegate == null)) {
                this.onBeginAddNoteDelegate = new BeginOperationDelegate(this.OnBeginAddNote);
            }
            if ((this.onEndAddNoteDelegate == null)) {
                this.onEndAddNoteDelegate = new EndOperationDelegate(this.OnEndAddNote);
            }
            if ((this.onAddNoteCompletedDelegate == null)) {
                this.onAddNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNoteCompleted);
            }
            base.InvokeAsync(this.onBeginAddNoteDelegate, new object[] {
                        userID,
                        noteDescription,
                        noteText}, this.onEndAddNoteDelegate, this.onAddNoteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginUpdateNote(int noteID, string noteText, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateNote(noteID, noteText, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndUpdateNote(System.IAsyncResult result) {
            base.Channel.EndUpdateNote(result);
        }
        
        private System.IAsyncResult OnBeginUpdateNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteID = ((int)(inValues[0]));
            string noteText = ((string)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginUpdateNote(noteID, noteText, callback, asyncState);
        }
        
        private object[] OnEndUpdateNote(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndUpdateNote(result);
            return null;
        }
        
        private void OnUpdateNoteCompleted(object state) {
            if ((this.UpdateNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateNoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateNoteAsync(int noteID, string noteText) {
            this.UpdateNoteAsync(noteID, noteText, null);
        }
        
        public void UpdateNoteAsync(int noteID, string noteText, object userState) {
            if ((this.onBeginUpdateNoteDelegate == null)) {
                this.onBeginUpdateNoteDelegate = new BeginOperationDelegate(this.OnBeginUpdateNote);
            }
            if ((this.onEndUpdateNoteDelegate == null)) {
                this.onEndUpdateNoteDelegate = new EndOperationDelegate(this.OnEndUpdateNote);
            }
            if ((this.onUpdateNoteCompletedDelegate == null)) {
                this.onUpdateNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateNoteCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateNoteDelegate, new object[] {
                        noteID,
                        noteText}, this.onEndUpdateNoteDelegate, this.onUpdateNoteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginDeleteNote(int noteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteNote(noteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndDeleteNote(System.IAsyncResult result) {
            base.Channel.EndDeleteNote(result);
        }
        
        private System.IAsyncResult OnBeginDeleteNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginDeleteNote(noteID, callback, asyncState);
        }
        
        private object[] OnEndDeleteNote(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndDeleteNote(result);
            return null;
        }
        
        private void OnDeleteNoteCompleted(object state) {
            if ((this.DeleteNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteNoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteNoteAsync(int noteID) {
            this.DeleteNoteAsync(noteID, null);
        }
        
        public void DeleteNoteAsync(int noteID, object userState) {
            if ((this.onBeginDeleteNoteDelegate == null)) {
                this.onBeginDeleteNoteDelegate = new BeginOperationDelegate(this.OnBeginDeleteNote);
            }
            if ((this.onEndDeleteNoteDelegate == null)) {
                this.onEndDeleteNoteDelegate = new EndOperationDelegate(this.OnEndDeleteNote);
            }
            if ((this.onDeleteNoteCompletedDelegate == null)) {
                this.onDeleteNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteNoteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteNoteDelegate, new object[] {
                        noteID}, this.onEndDeleteNoteDelegate, this.onDeleteNoteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginAddGroup(string groupName, string groupDescription, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddGroup(groupName, groupDescription, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndAddGroup(System.IAsyncResult result) {
            base.Channel.EndAddGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string groupName = ((string)(inValues[0]));
            string groupDescription = ((string)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginAddGroup(groupName, groupDescription, callback, asyncState);
        }
        
        private object[] OnEndAddGroup(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndAddGroup(result);
            return null;
        }
        
        private void OnAddGroupCompleted(object state) {
            if ((this.AddGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddGroupAsync(string groupName, string groupDescription) {
            this.AddGroupAsync(groupName, groupDescription, null);
        }
        
        public void AddGroupAsync(string groupName, string groupDescription, object userState) {
            if ((this.onBeginAddGroupDelegate == null)) {
                this.onBeginAddGroupDelegate = new BeginOperationDelegate(this.OnBeginAddGroup);
            }
            if ((this.onEndAddGroupDelegate == null)) {
                this.onEndAddGroupDelegate = new EndOperationDelegate(this.OnEndAddGroup);
            }
            if ((this.onAddGroupCompletedDelegate == null)) {
                this.onAddGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddGroupDelegate, new object[] {
                        groupName,
                        groupDescription}, this.onEndAddGroupDelegate, this.onAddGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginUpdateGroup(int groupID, string groupDescription, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateGroup(groupID, groupDescription, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndUpdateGroup(System.IAsyncResult result) {
            base.Channel.EndUpdateGroup(result);
        }
        
        private System.IAsyncResult OnBeginUpdateGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            string groupDescription = ((string)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginUpdateGroup(groupID, groupDescription, callback, asyncState);
        }
        
        private object[] OnEndUpdateGroup(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndUpdateGroup(result);
            return null;
        }
        
        private void OnUpdateGroupCompleted(object state) {
            if ((this.UpdateGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateGroupAsync(int groupID, string groupDescription) {
            this.UpdateGroupAsync(groupID, groupDescription, null);
        }
        
        public void UpdateGroupAsync(int groupID, string groupDescription, object userState) {
            if ((this.onBeginUpdateGroupDelegate == null)) {
                this.onBeginUpdateGroupDelegate = new BeginOperationDelegate(this.OnBeginUpdateGroup);
            }
            if ((this.onEndUpdateGroupDelegate == null)) {
                this.onEndUpdateGroupDelegate = new EndOperationDelegate(this.OnEndUpdateGroup);
            }
            if ((this.onUpdateGroupCompletedDelegate == null)) {
                this.onUpdateGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateGroupCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateGroupDelegate, new object[] {
                        groupID,
                        groupDescription}, this.onEndUpdateGroupDelegate, this.onUpdateGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginDeleteGroup(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteGroup(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndDeleteGroup(System.IAsyncResult result) {
            base.Channel.EndDeleteGroup(result);
        }
        
        private System.IAsyncResult OnBeginDeleteGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginDeleteGroup(groupID, callback, asyncState);
        }
        
        private object[] OnEndDeleteGroup(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndDeleteGroup(result);
            return null;
        }
        
        private void OnDeleteGroupCompleted(object state) {
            if ((this.DeleteGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteGroupAsync(int groupID) {
            this.DeleteGroupAsync(groupID, null);
        }
        
        public void DeleteGroupAsync(int groupID, object userState) {
            if ((this.onBeginDeleteGroupDelegate == null)) {
                this.onBeginDeleteGroupDelegate = new BeginOperationDelegate(this.OnBeginDeleteGroup);
            }
            if ((this.onEndDeleteGroupDelegate == null)) {
                this.onEndDeleteGroupDelegate = new EndOperationDelegate(this.OnEndDeleteGroup);
            }
            if ((this.onDeleteGroupCompletedDelegate == null)) {
                this.onDeleteGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteGroupCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteGroupDelegate, new object[] {
                        groupID}, this.onEndDeleteGroupDelegate, this.onDeleteGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginAddUserToGroup(int userID, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserToGroup(userID, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndAddUserToGroup(System.IAsyncResult result) {
            base.Channel.EndAddUserToGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddUserToGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginAddUserToGroup(userID, groupID, callback, asyncState);
        }
        
        private object[] OnEndAddUserToGroup(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndAddUserToGroup(result);
            return null;
        }
        
        private void OnAddUserToGroupCompleted(object state) {
            if ((this.AddUserToGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserToGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserToGroupAsync(int userID, int groupID) {
            this.AddUserToGroupAsync(userID, groupID, null);
        }
        
        public void AddUserToGroupAsync(int userID, int groupID, object userState) {
            if ((this.onBeginAddUserToGroupDelegate == null)) {
                this.onBeginAddUserToGroupDelegate = new BeginOperationDelegate(this.OnBeginAddUserToGroup);
            }
            if ((this.onEndAddUserToGroupDelegate == null)) {
                this.onEndAddUserToGroupDelegate = new EndOperationDelegate(this.OnEndAddUserToGroup);
            }
            if ((this.onAddUserToGroupCompletedDelegate == null)) {
                this.onAddUserToGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserToGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserToGroupDelegate, new object[] {
                        userID,
                        groupID}, this.onEndAddUserToGroupDelegate, this.onAddUserToGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginAddNoteToGroup(int noteID, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNoteToGroup(noteID, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndAddNoteToGroup(System.IAsyncResult result) {
            base.Channel.EndAddNoteToGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddNoteToGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginAddNoteToGroup(noteID, groupID, callback, asyncState);
        }
        
        private object[] OnEndAddNoteToGroup(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndAddNoteToGroup(result);
            return null;
        }
        
        private void OnAddNoteToGroupCompleted(object state) {
            if ((this.AddNoteToGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNoteToGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNoteToGroupAsync(int noteID, int groupID) {
            this.AddNoteToGroupAsync(noteID, groupID, null);
        }
        
        public void AddNoteToGroupAsync(int noteID, int groupID, object userState) {
            if ((this.onBeginAddNoteToGroupDelegate == null)) {
                this.onBeginAddNoteToGroupDelegate = new BeginOperationDelegate(this.OnBeginAddNoteToGroup);
            }
            if ((this.onEndAddNoteToGroupDelegate == null)) {
                this.onEndAddNoteToGroupDelegate = new EndOperationDelegate(this.OnEndAddNoteToGroup);
            }
            if ((this.onAddNoteToGroupCompletedDelegate == null)) {
                this.onAddNoteToGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNoteToGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddNoteToGroupDelegate, new object[] {
                        noteID,
                        groupID}, this.onEndAddNoteToGroupDelegate, this.onAddNoteToGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginRemoveUserFromGroup(int userID, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUserFromGroup(userID, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndRemoveUserFromGroup(System.IAsyncResult result) {
            base.Channel.EndRemoveUserFromGroup(result);
        }
        
        private System.IAsyncResult OnBeginRemoveUserFromGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginRemoveUserFromGroup(userID, groupID, callback, asyncState);
        }
        
        private object[] OnEndRemoveUserFromGroup(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndRemoveUserFromGroup(result);
            return null;
        }
        
        private void OnRemoveUserFromGroupCompleted(object state) {
            if ((this.RemoveUserFromGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUserFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUserFromGroupAsync(int userID, int groupID) {
            this.RemoveUserFromGroupAsync(userID, groupID, null);
        }
        
        public void RemoveUserFromGroupAsync(int userID, int groupID, object userState) {
            if ((this.onBeginRemoveUserFromGroupDelegate == null)) {
                this.onBeginRemoveUserFromGroupDelegate = new BeginOperationDelegate(this.OnBeginRemoveUserFromGroup);
            }
            if ((this.onEndRemoveUserFromGroupDelegate == null)) {
                this.onEndRemoveUserFromGroupDelegate = new EndOperationDelegate(this.OnEndRemoveUserFromGroup);
            }
            if ((this.onRemoveUserFromGroupCompletedDelegate == null)) {
                this.onRemoveUserFromGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromGroupCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUserFromGroupDelegate, new object[] {
                        userID,
                        groupID}, this.onEndRemoveUserFromGroupDelegate, this.onRemoveUserFromGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginRemoveNoteFromGroup(int noteID, int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveNoteFromGroup(noteID, groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Notepad_Mobile.NotepadServiceProxy.INotepad.EndRemoveNoteFromGroup(System.IAsyncResult result) {
            base.Channel.EndRemoveNoteFromGroup(result);
        }
        
        private System.IAsyncResult OnBeginRemoveNoteFromGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteID = ((int)(inValues[0]));
            int groupID = ((int)(inValues[1]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginRemoveNoteFromGroup(noteID, groupID, callback, asyncState);
        }
        
        private object[] OnEndRemoveNoteFromGroup(System.IAsyncResult result) {
            ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndRemoveNoteFromGroup(result);
            return null;
        }
        
        private void OnRemoveNoteFromGroupCompleted(object state) {
            if ((this.RemoveNoteFromGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveNoteFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveNoteFromGroupAsync(int noteID, int groupID) {
            this.RemoveNoteFromGroupAsync(noteID, groupID, null);
        }
        
        public void RemoveNoteFromGroupAsync(int noteID, int groupID, object userState) {
            if ((this.onBeginRemoveNoteFromGroupDelegate == null)) {
                this.onBeginRemoveNoteFromGroupDelegate = new BeginOperationDelegate(this.OnBeginRemoveNoteFromGroup);
            }
            if ((this.onEndRemoveNoteFromGroupDelegate == null)) {
                this.onEndRemoveNoteFromGroupDelegate = new EndOperationDelegate(this.OnEndRemoveNoteFromGroup);
            }
            if ((this.onRemoveNoteFromGroupCompletedDelegate == null)) {
                this.onRemoveNoteFromGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveNoteFromGroupCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveNoteFromGroupDelegate, new object[] {
                        noteID,
                        groupID}, this.onEndRemoveNoteFromGroupDelegate, this.onRemoveNoteFromGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginGetUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad_Mobile.NotepadServiceProxy.UserDC Notepad_Mobile.NotepadServiceProxy.INotepad.EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginGetUser(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            Notepad_Mobile.NotepadServiceProxy.UserDC retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(int userID) {
            this.GetUserAsync(userID, null);
        }
        
        public void GetUserAsync(int userID, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        userID}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginGetNote(int noteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNote(noteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad_Mobile.NotepadServiceProxy.NoteDC Notepad_Mobile.NotepadServiceProxy.INotepad.EndGetNote(System.IAsyncResult result) {
            return base.Channel.EndGetNote(result);
        }
        
        private System.IAsyncResult OnBeginGetNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginGetNote(noteID, callback, asyncState);
        }
        
        private object[] OnEndGetNote(System.IAsyncResult result) {
            Notepad_Mobile.NotepadServiceProxy.NoteDC retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndGetNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNoteCompleted(object state) {
            if ((this.GetNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNoteCompleted(this, new GetNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNoteAsync(int noteID) {
            this.GetNoteAsync(noteID, null);
        }
        
        public void GetNoteAsync(int noteID, object userState) {
            if ((this.onBeginGetNoteDelegate == null)) {
                this.onBeginGetNoteDelegate = new BeginOperationDelegate(this.OnBeginGetNote);
            }
            if ((this.onEndGetNoteDelegate == null)) {
                this.onEndGetNoteDelegate = new EndOperationDelegate(this.OnEndGetNote);
            }
            if ((this.onGetNoteCompletedDelegate == null)) {
                this.onGetNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNoteCompleted);
            }
            base.InvokeAsync(this.onBeginGetNoteDelegate, new object[] {
                        noteID}, this.onEndGetNoteDelegate, this.onGetNoteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginGetGroup(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroup(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Notepad_Mobile.NotepadServiceProxy.GroupDC Notepad_Mobile.NotepadServiceProxy.INotepad.EndGetGroup(System.IAsyncResult result) {
            return base.Channel.EndGetGroup(result);
        }
        
        private System.IAsyncResult OnBeginGetGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginGetGroup(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroup(System.IAsyncResult result) {
            Notepad_Mobile.NotepadServiceProxy.GroupDC retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndGetGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupCompleted(object state) {
            if ((this.GetGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupCompleted(this, new GetGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupAsync(int groupID) {
            this.GetGroupAsync(groupID, null);
        }
        
        public void GetGroupAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupDelegate == null)) {
                this.onBeginGetGroupDelegate = new BeginOperationDelegate(this.OnBeginGetGroup);
            }
            if ((this.onEndGetGroupDelegate == null)) {
                this.onEndGetGroupDelegate = new EndOperationDelegate(this.OnEndGetGroup);
            }
            if ((this.onGetGroupCompletedDelegate == null)) {
                this.onGetGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupDelegate, new object[] {
                        groupID}, this.onEndGetGroupDelegate, this.onGetGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginGetUserNotes(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserNotes(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> Notepad_Mobile.NotepadServiceProxy.INotepad.EndGetUserNotes(System.IAsyncResult result) {
            return base.Channel.EndGetUserNotes(result);
        }
        
        private System.IAsyncResult OnBeginGetUserNotes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginGetUserNotes(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserNotes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndGetUserNotes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserNotesCompleted(object state) {
            if ((this.GetUserNotesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserNotesCompleted(this, new GetUserNotesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserNotesAsync(int userID) {
            this.GetUserNotesAsync(userID, null);
        }
        
        public void GetUserNotesAsync(int userID, object userState) {
            if ((this.onBeginGetUserNotesDelegate == null)) {
                this.onBeginGetUserNotesDelegate = new BeginOperationDelegate(this.OnBeginGetUserNotes);
            }
            if ((this.onEndGetUserNotesDelegate == null)) {
                this.onEndGetUserNotesDelegate = new EndOperationDelegate(this.OnEndGetUserNotes);
            }
            if ((this.onGetUserNotesCompletedDelegate == null)) {
                this.onGetUserNotesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserNotesCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserNotesDelegate, new object[] {
                        userID}, this.onEndGetUserNotesDelegate, this.onGetUserNotesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginGetGroupNotes(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupNotes(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> Notepad_Mobile.NotepadServiceProxy.INotepad.EndGetGroupNotes(System.IAsyncResult result) {
            return base.Channel.EndGetGroupNotes(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupNotes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginGetGroupNotes(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupNotes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndGetGroupNotes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupNotesCompleted(object state) {
            if ((this.GetGroupNotesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupNotesCompleted(this, new GetGroupNotesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupNotesAsync(int groupID) {
            this.GetGroupNotesAsync(groupID, null);
        }
        
        public void GetGroupNotesAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupNotesDelegate == null)) {
                this.onBeginGetGroupNotesDelegate = new BeginOperationDelegate(this.OnBeginGetGroupNotes);
            }
            if ((this.onEndGetGroupNotesDelegate == null)) {
                this.onEndGetGroupNotesDelegate = new EndOperationDelegate(this.OnEndGetGroupNotes);
            }
            if ((this.onGetGroupNotesCompletedDelegate == null)) {
                this.onGetGroupNotesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupNotesCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupNotesDelegate, new object[] {
                        groupID}, this.onEndGetGroupNotesDelegate, this.onGetGroupNotesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Notepad_Mobile.NotepadServiceProxy.INotepad.BeginGetGroupUsers(int groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupUsers(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC> Notepad_Mobile.NotepadServiceProxy.INotepad.EndGetGroupUsers(System.IAsyncResult result) {
            return base.Channel.EndGetGroupUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupID = ((int)(inValues[0]));
            return ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).BeginGetGroupUsers(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetGroupUsers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC> retVal = ((Notepad_Mobile.NotepadServiceProxy.INotepad)(this)).EndGetGroupUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupUsersCompleted(object state) {
            if ((this.GetGroupUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupUsersCompleted(this, new GetGroupUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupUsersAsync(int groupID) {
            this.GetGroupUsersAsync(groupID, null);
        }
        
        public void GetGroupUsersAsync(int groupID, object userState) {
            if ((this.onBeginGetGroupUsersDelegate == null)) {
                this.onBeginGetGroupUsersDelegate = new BeginOperationDelegate(this.OnBeginGetGroupUsers);
            }
            if ((this.onEndGetGroupUsersDelegate == null)) {
                this.onEndGetGroupUsersDelegate = new EndOperationDelegate(this.OnEndGetGroupUsers);
            }
            if ((this.onGetGroupUsersCompletedDelegate == null)) {
                this.onGetGroupUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupUsersDelegate, new object[] {
                        groupID}, this.onEndGetGroupUsersDelegate, this.onGetGroupUsersCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Notepad_Mobile.NotepadServiceProxy.INotepad CreateChannel() {
            return new NotepadClientChannel(this);
        }
        
        private class NotepadClientChannel : ChannelBase<Notepad_Mobile.NotepadServiceProxy.INotepad>, Notepad_Mobile.NotepadServiceProxy.INotepad {
            
            public NotepadClientChannel(System.ServiceModel.ClientBase<Notepad_Mobile.NotepadServiceProxy.INotepad> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCheckUser(string userName, string userPass, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = userPass;
                System.IAsyncResult _result = base.BeginInvoke("CheckUser", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad_Mobile.NotepadServiceProxy.UserDC EndCheckUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad_Mobile.NotepadServiceProxy.UserDC _result = ((Notepad_Mobile.NotepadServiceProxy.UserDC)(base.EndInvoke("CheckUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUser(string userName, string userPass, string userDescription, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userName;
                _args[1] = userPass;
                _args[2] = userDescription;
                System.IAsyncResult _result = base.BeginInvoke("AddUser", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad_Mobile.NotepadServiceProxy.UserDC EndAddUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad_Mobile.NotepadServiceProxy.UserDC _result = ((Notepad_Mobile.NotepadServiceProxy.UserDC)(base.EndInvoke("AddUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateUser(int userID, string userDescription, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = userDescription;
                System.IAsyncResult _result = base.BeginInvoke("UpdateUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateUser", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteUser(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteUser", _args, result);
            }
            
            public System.IAsyncResult BeginAddNote(int userID, string noteDescription, string noteText, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userID;
                _args[1] = noteDescription;
                _args[2] = noteText;
                System.IAsyncResult _result = base.BeginInvoke("AddNote", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad_Mobile.NotepadServiceProxy.NoteDC EndAddNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad_Mobile.NotepadServiceProxy.NoteDC _result = ((Notepad_Mobile.NotepadServiceProxy.NoteDC)(base.EndInvoke("AddNote", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateNote(int noteID, string noteText, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = noteID;
                _args[1] = noteText;
                System.IAsyncResult _result = base.BeginInvoke("UpdateNote", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateNote", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteNote(int noteID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = noteID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteNote", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteNote", _args, result);
            }
            
            public System.IAsyncResult BeginAddGroup(string groupName, string groupDescription, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = groupName;
                _args[1] = groupDescription;
                System.IAsyncResult _result = base.BeginInvoke("AddGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddGroup", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateGroup(int groupID, string groupDescription, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = groupID;
                _args[1] = groupDescription;
                System.IAsyncResult _result = base.BeginInvoke("UpdateGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateGroup", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteGroup(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteGroup", _args, result);
            }
            
            public System.IAsyncResult BeginAddUserToGroup(int userID, int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("AddUserToGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddUserToGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddUserToGroup", _args, result);
            }
            
            public System.IAsyncResult BeginAddNoteToGroup(int noteID, int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = noteID;
                _args[1] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("AddNoteToGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddNoteToGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddNoteToGroup", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveUserFromGroup(int userID, int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveUserFromGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveUserFromGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveUserFromGroup", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveNoteFromGroup(int noteID, int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = noteID;
                _args[1] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveNoteFromGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveNoteFromGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveNoteFromGroup", _args, result);
            }
            
            public System.IAsyncResult BeginGetUser(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUser", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad_Mobile.NotepadServiceProxy.UserDC EndGetUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad_Mobile.NotepadServiceProxy.UserDC _result = ((Notepad_Mobile.NotepadServiceProxy.UserDC)(base.EndInvoke("GetUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNote(int noteID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = noteID;
                System.IAsyncResult _result = base.BeginInvoke("GetNote", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad_Mobile.NotepadServiceProxy.NoteDC EndGetNote(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad_Mobile.NotepadServiceProxy.NoteDC _result = ((Notepad_Mobile.NotepadServiceProxy.NoteDC)(base.EndInvoke("GetNote", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroup(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroup", _args, callback, asyncState);
                return _result;
            }
            
            public Notepad_Mobile.NotepadServiceProxy.GroupDC EndGetGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Notepad_Mobile.NotepadServiceProxy.GroupDC _result = ((Notepad_Mobile.NotepadServiceProxy.GroupDC)(base.EndInvoke("GetGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserNotes(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserNotes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> EndGetUserNotes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> _result = ((System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC>)(base.EndInvoke("GetUserNotes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupNotes(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupNotes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> EndGetGroupNotes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC> _result = ((System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.NoteDC>)(base.EndInvoke("GetGroupNotes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupUsers(int groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC> EndGetGroupUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC> _result = ((System.Collections.ObjectModel.ObservableCollection<Notepad_Mobile.NotepadServiceProxy.UserDC>)(base.EndInvoke("GetGroupUsers", _args, result)));
                return _result;
            }
        }
    }
}
